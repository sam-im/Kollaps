[package]
name = "monitor"
version = "0.1.0"
edition = "2021"

[dependencies]
monitor-common = { path = "../monitor-common" }
aya = { version = "0.13.1", default-features = false, features = [ "async_tokio" ] }
libc = { version = "0.2.159", default-features = false }
thiserror = "2.0.12"
tokio = { version = "1.44.2", features = ["sync", "rt"] }
bytes = "1.10.1"

[build-dependencies]
anyhow = { version = "1", default-features = false }
aya-build = { version = "0.1.2", default-features = false }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
monitor-ebpf = { path = "../monitor-ebpf" }
